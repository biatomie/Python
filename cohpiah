from lib2to3.pgen2.token import SLASHEQUAL
import re
from itertools import chain


def le_assinatura():
    '''A funcao le os valores dos tracos linguisticos do modelo e devolve uma assinatura a ser comparada com os textos fornecidos'''
    print("Bem-vindo ao detector automático de COH-PIAH.")
    print("Informe a assinatura típica de um aluno infectado:")

    wal = float(input("Entre o tamanho médio de palavra:"))
    ttr = float(input("Entre a relação Type-Token:"))
    hlr = float(input("Entre a Razão Hapax Legomana:"))
    sal = float(input("Entre o tamanho médio de sentença:"))
    sac = float(input("Entre a complexidade média da sentença:"))
    pal = float(input("Entre o tamanho medio de frase:"))

    return [wal, ttr, hlr, sal, sac, pal]

def le_textos():
    '''A funcao le todos os textos a serem comparados e devolve uma lista contendo cada texto como um elemento'''
    i = 1
    textos = []
    texto = input("Digite o texto " + str(i) +" (aperte enter para sair):")
    while texto:
        textos.append(texto)
        i += 1
        texto = input("Digite o texto " + str(i) +" (aperte enter para sair):")

    return textos

def separa_sentencas(texto):
    '''A funcao recebe um texto e devolve uma lista das sentencas dentro do texto'''
    sentencas = re.split(r'[.!?]+', texto)
    if sentencas[-1] == '':
        del sentencas[-1]
    return sentencas

def separa_frases(sentenca):
    '''A funcao recebe uma sentenca e devolve uma lista das frases dentro da sentenca'''
    return re.split(r'[,:;]+', sentenca)

def separa_palavras(frase):
    '''A funcao recebe uma frase e devolve uma lista das palavras dentro da frase'''
    return frase.split()

def n_palavras_unicas(lista_palavras):
    '''Essa funcao recebe uma lista de palavras e devolve o numero de palavras que aparecem uma unica vez'''
    freq = dict()
    unicas = 0
    for palavra in lista_palavras:
        p = palavra.lower()
        if p in freq:
            if freq[p] == 1:
                unicas -= 1
            freq[p] += 1
        else:
            freq[p] = 1
            unicas += 1

    return unicas

def n_palavras_diferentes(lista_palavras):
    '''Essa funcao recebe uma lista de palavras e devolve o numero de palavras diferentes utilizadas'''
    freq = dict()
    for palavra in lista_palavras:
        p = palavra.lower()
        if p in freq:
            freq[p] += 1
        else:
            freq[p] = 1

    return len(freq)
def compara_assinatura(as_a, as_b):
    '''IMPLEMENTAR. Essa funcao recebe duas assinaturas de texto e deve devolver o grau de similaridade nas assinaturas.'''

    sab = ((wal_a - wal) + (ttr_a - ttr) + (hlr_a - hlr) + (sal_a - sal) + (sac_a - sac) + (pal_a - pal))/6
    return sab

def calcula_assinatura(texto):

    letextos = le_textos()

    for texto in letextos:
        separa_sentenca = separa_sentencas(texto)
    # print("separa_sentenca",separa_sentenca)
    # print("len separa sentencas", len(separa_sentenca))

    varias_frases = []
    for sentenca in separa_sentenca:
        varias_frases.append(separa_frases(sentenca))
        
    # print("varias_frases", varias_frases)
    # print("len varias frases",len(varias_frases))
    
    frases = list(chain(*varias_frases)) #reduz o nível da lista
    # print(frases)
    # print("len frases", len(frases))
    total_frases = len(frases)

    varias_palavras=[]
    for frase in frases:
        varias_palavras.append(separa_palavras(frase))

    lista_palavras = list(chain(*varias_palavras))


    varias_letras=[]
    for letras in lista_palavras:
        varias_letras.extend(letras)

    #wal - media
    total_palavras = len(lista_palavras)
    tam_palavras = len(varias_letras)
    wal_a = tam_palavras / total_palavras

    #ttr - type token
    total_palavras_diferentes = n_palavras_diferentes(lista_palavras)
    ttr_a = total_palavras_diferentes / total_palavras

    #hlr - hapax legomana
    total_palavras_unicas = n_palavras_unicas(lista_palavras)
    hlr_a = total_palavras_unicas / total_palavras

    #sal - tamanho medio de sentenca
    total_sentencas = len(separa_sentenca)
    sal_a = tam_palavras / total_sentencas

    #sac - complexidade da sentença
    sac_a= total_frases / total_sentencas

    #pal - tamanho médio de frase
    pal_a= tam_palavras / total_frases  

    return [wal_a, ttr_a, hlr_a, sal_a, sac_a, pal_a]

texto = "Então resolveu ir brincar com a Máquina pra ser também imperador dos filhos da mandioca. Mas as três cunhas deram muitas risadas e falaram que isso de deuses era gorda mentira antiga, que não tinha deus não e que com a máquina ninguém não brinca porque ela mata. A máquina não era deus não, nem possuía os distintivos femininos de que o herói gostava tanto. Era feita pelos homens. Se mexia com eletricidade com fogo com água com vento com fumo, os homens aproveitando as forças da natureza. Porém jacaré acreditou? nem o herói! Se levantou na cama e com um gesto, esse sim! bem guaçu de desdém, tó! batendo o antebraço esquerdo dentro do outro dobrado, mexeu com energia a munheca direita pras três cunhas e partiu. Nesse instante, falam, ele inventou o gesto famanado de ofensa: a pacova."
le_assinatura()
calcula_assinatura(texto)
print(calcula_assinatura(texto))

as_a = calcula_assinatura(texto)
as_b = le_assinatura()
print(compara_assinatura(as_a,as_b))

# print(calcula_assinatura(texto))


# textos = le_textos()[0]
# print(separa_sentencas(textos))

# sentenca = separa_sentencas(textos)[0]
# print(separa_frases(sentenca)) 

# frase = separa_frases(sentenca)[0]
# print(separa_palavras(frase))


# letras = len(separa_palavras(frase)[0])


# print(letras,separa_palavras(frase)[0])
# n_espacos = textos.count(" ")
# print("n_espacos", n_espacos)
# caracteres = len(textos)
# print("caracteres", caracteres)
# n_palavras = len(separa_palavras(frase))
# print("n_palavras", n_palavras)
# sentenca.extend(texto[0]) -  todas as letras dentro da frase






